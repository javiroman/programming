# https://howtodoinjava.com/log4j2/log4j-2-json-configuration-example

# The level of internal Log4j events that should be logged to the console.
# Valid values for this attribute are "trace", "debug", "info", "warn",
# "error" and "fatal". Log4j will log details about initialization,
# rollover and other internal actions to the status logger. Setting
# status="trace" is one of the first tools available to you if you need
# to troubleshoot log4j.
#
#(Alternatively, setting system property log4j2.debug will also print
# internal Log4j2 logging to the console, including internal logging
# that took place before the configuration file was found.)
status = trace

# The name of the configuration.
name = PropertiesConfig

# Every configuration must have a root logger. If one is not configured
# the default root LoggerConfig, which has a level of ERROR and has
# a Console appender attached, will be used. The main differences between
# the root logger and other loggers are:
#
# - The root logger does not have a name attribute.
# - The root logger does not support the additivity attribute since it
#   has no parent.
rootLogger.level = error
rootLogger.appenderRefs = console

# Log4j allows a filter to be specified in any of 4 places:
# 1. At the same level as the appenders, loggers and properties elements.
#    These filters can accept or reject events before they have been passed to
#    a LoggerConfig.
# 2. In a logger element. These filters can accept or reject events for
#    specific loggers.
# 3. In an appender element. These filters can prevent or cause events to
#    be processed by the appender.
# 4. In an appender reference element. These filters are used to determine
#    if a Logger should route the event to an appender.

# Although only a single filter element can be configured, that element may
# be the filters element which represents the CompositeFilter. The filters
# element allows any number of filter elements to be configured within it.
# The following example shows how multiple filters can be configured on
# the ConsoleAppender.
filters = threshold
filter.threshold.type = ThresholdFilter
filter.threshold.level = debug

appenders = console
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
#appender.console.layout.pattern = %d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n
